{
    "body": {
        "codeList": [
            {
                "id": "TPL01",
                "title": "1. watch사용법",
                "content": "watch는 언제 어떻게 사용하는지를 알아보는 겁니다",
                "img": "",
                "gif": "",
                "iframeSrc": "https://jaesang98.github.io/jsDevelop/#/VUE_1",
                "codeInfo": [
                    {
                        "codeId": "TPL01_CD01",
                        "codeLanguage": "vue",
                        "codeContent": "<template>\n  <div class=\"code-container\">\n    <div>\n      <h3 class=\"code-title\">watch</h3>\n      <div class=\"code-contents\">\n        <div class=\"mt-3\">{{ data }}</div>\n      </div>\n\n      <div class=\"button-group\">\n        <button @click=\"searchQuery = !searchQuery\" v-show=\"!searchQuery\">클릭하면 2초뒤에 변함</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue'\n\nconst data = ref(\"안녕하세요\");\nconst searchQuery = ref(false);\n\nwatch(searchQuery, (newQuery) => {\n  if(newQuery) {\n    console.log(\"2초뒤에 바뀝니다!\")\n    setTimeout(() => {\n      data.value = \"반갑습니다\";\n      searchQuery.value = !searchQuery.value;\n    },2000);\n  }\n});\n</script>",
                        "codeDescription": "반응형 데이터나 프로퍼티의 변화를 감지하고, 해당 변화가 일어날 때 특정 작업을 수행하고 싶을 때 사용하는 옵션. 만약 변수가 배열이라면 { deep: true }를 써줘야 한다"
                    }
                ]
            },
            {
                "id": "TPL01",
                "title": "2. computed사용법",
                "content": "computed는 언제 어떻게 사용하는지를 알아보는 겁니다",
                "img": "",
                "gif": "",
                "iframeSrc": "https://jaesang98.github.io/jsDevelop/#/VUE_2",
                "codeInfo": [
                    {
                        "codeId": "TPL01_CD02",
                        "codeLanguage": "vue",
                        "codeContent": "<template>\n  <div class=\"code-container\">\n    <div>\n      <h3 class=\"code-title\">computed</h3>\n      <div class=\"code-contents\">\n        <div class=\"mt-3\">{{ data }}</div>\n      </div>\n\n      <div class=\"button-group\">\n        <button @click=\"clickYn()\">클릭하면 뭐 나타남</button>\n      </div>\n\n      <div v-show=\"searchQuery\">짠</div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst data = ref(\"안녕하세요\");\n\nfunction clickYn() {\n  setTimeout(() => {\n    data.value = \"반갑습니다\";\n  }, 1000);\n}\n\nconst searchQuery = computed(() => {\n  console.log(\"값이 변경되야 콘솔찍힘\");\n  return data.value === \"반갑습니다\";\n});\n</script>",
                        "codeDescription": "주로 복잡한 계산을 처리하거나 데이터를 변환할 때 사용한다 하지만 실 프로젝트를 봤을 때는 boolean값만 내보내는 용도로 씀, watch와 달리 내부 값이 변경이 되야 작동함. 하지만 그 외 반응형 데이터 수정 및 셋타임 아웃과 같은 비동기 작업은 watch사용해야함"
                    }
                ]
            },
            {
                "id": "TPL01",
                "title": "3. props와 emit사용법",
                "content": "props와 emit 관련된 설명과 언제 어떻게 사용하는지를 알아보는 겁니다",
                "img": "",
                "gif": "",
                "iframeSrc": "https://jaesang98.github.io/jsDevelop/#/VUE_3",
                "codeInfo": [
                    {
                        "codeId": "TPL01_CD03",
                        "codeLanguage": "vue",
                        "codeContent": "<!-- 부모 컴포넌트 -->\n<template>\n  <div class=\"code-container\">\n    <div>\n      <h3 class=\"code-title\">부모 컴포넌트 입니다.</h3>\n      <div class=\"code-contents\">\n        <div class=\"mt-3\">받은 데이터: {{ childmessage1 }} , {{ childmessage2 }}</div>\n      </div>\n    </div>\n    <div class=\"button-group\">\n      <button @click=\"showChild = !showChild\">자식 컴포넌트를 보여줘</button>\n      <button @click=\"parentmessage = '데이터를 보냄'\">자식에게 데이터를 전달</button>\n    </div>\n  </div>\n  <div class=\"mt-3\">\n    <VUE_4 v-show=\"showChild\" :parentmessage = \"parentmessage\" @message = \"message\"></VUE_4>\n  </div>\n  {{ childmessage }}\n</template>\n\n<script setup>\nimport {ref} from 'vue'\nimport VUE_4 from './VUE_4.vue'\n\nconst showChild = ref(false);\nconst parentmessage = ref(\"\");\nconst childmessage1 = ref(\"\");\nconst childmessage2 = ref(\"\");\n\nconst message = (msg1, msg2) => {\n  childmessage1.value = msg1;\n  childmessage2.value = msg2;\n}\n</script>\n\n<!-- 자식 컴포넌트 -->\n<template>\n  <div class=\"code-container\">\n    <div>\n      <h3 class=\"code-title\">자식 컴포넌트 입니다.</h3>\n      <div class=\"code-contents\">\n        <div class=\"mt-3\">받은 데이터: {{ parentmessage }}</div>\n      </div>\n    </div>\n    <div class=\"button-group\">\n      <button @click=\"emit('message', '자식데이터1', '자식데이터2')\">부모에게 데이터를 전달</button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps, defineEmits } from 'vue';\n\nconst props = defineProps({\n  parentmessage: String,\n});\n\nconst emit = defineEmits(['message']);\n</script>\n",
                        "codeDescription": "자식 컴포넌트를 임포트 하는것과 부모가 자식에게 데이터를 보내는 props, 자식이 부모에게 메시지를 주는 emit의 대한 코드"
                    }
                ]
            }
        ]
    }
}