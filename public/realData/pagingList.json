{
    "body": {
        "codeList": [
            {
                "id": "TPL01",
                "title": "1. 스크롤을 이용한 페이징",
                "content": "스크롤을 아래로 내릴 때 마다 생기는 페이징 처리입니다",
                "img": "",
                "gif": "",
                "iframeSrc": "https://jaesang98.github.io/jsDevelop/#/PAGING_1",
                "codeInfo": [
                    {
                        "codeId": "TPL01_CD01",
                        "codeLanguage": "vue",
                        "codeContent": "<template>\n  <div class=\"code-container\">\n    <div>\n      <h3 class=\"code-title\">스크롤 시 페이징 처리</h3>\n      <div class=\"code-contents\" @scroll=\"scrollToBottom()\">\n        <div class=\"content-item\" v-for=\"(array, idx) in arrays\" :key=\"idx\">\n          <span>{{ array }}번</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst count = ref(1);\nconst arrays = ref([]);\nonMounted(() => {\n  for (let i = count.value; i < count.value + 10; i++) {\n    arrays.value.push(i);\n  }\n})\n\n//맨 아래로 스크롤 시 페이징 처리\nfunction scrollToBottom() {\n  const container = document.querySelector('.code-contents');\n  const scrollTop = container.scrollTop;\n  const scrollHeight = container.scrollHeight;\n  const clientHeight = container.clientHeight;\n\n  if (scrollTop + clientHeight >= scrollHeight - 1) {\n    count.value += 10;\n\n    for (let i = count.value; i < count.value + 10; i++) {\n      arrays.value.push(i);\n    }\n  }\n}\n</script>",
                        "codeDescription": "스크롤이 가장 밑으로 갔을 때 페이징 처리를 하는 방식입니다. 반복문 대신 서버와 통신하는 코드와 count같이 페이징 시 바뀌는 변수들을 이용해야합니다"
                    },
                    {
                        "codeId": "TPL01_CD02",
                        "codeLanguage": "React",
                        "codeContent": "준비중",
                        "codeDescription": "준비중"
                    }
                ]
            },

            {
                "id": "TPL01",
                "title": "2. 버튼 클릭 시 페이징",
                "content": "아래 버튼을 클릭할 때 마다 생기는 페이징 처리입니다",
                "img": "",
                "gif": "",
                "iframeSrc": "https://jaesang98.github.io/jsDevelop/#/PAGING_2",
                "codeInfo": [
                    {
                        "codeId": "TPL01_CD01",
                        "codeLanguage": "vue",
                        "codeContent": "<template>\n  <div class=\"code-container\">\n    <div>\n      <h3 class=\"code-title\">스크롤 시 페이징 처리</h3>\n      <div class=\"code-contents\">\n        <div class=\"content-item\" v-for=\"(array, idx) in arrays\" :key=\"idx\">\n          <span>{{ array }}번</span>\n        </div>\n      </div>\n\n      <div class=\"button-group\">\n        <button @click=\"loadMorePages()\">더보기</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst count = ref(1);\nconst arrays = ref([]);\nonMounted(() => {\n  for (let i = count.value; i < count.value + 10; i++) {\n    arrays.value.push(i);\n  }\n})\n\n//버튼 클릭 시 데이터 더 보기\nfunction loadMorePages() {\n  count.value += 10;\n  for (let i = count.value; i < count.value + 10; i++) {\n    arrays.value.push(i);\n  }\n}\n</script>",
                        "codeDescription": "클릭할 때 마다 페이징 처리를 하는 방식입니다. 사실상 실제 이딴식으로 짜진 않을거같고 count같이 페이징 시 바뀌는 변수들로 서버랑 통신해야합니다"
                    },
                    {
                        "codeId": "TPL01_CD02",
                        "codeLanguage": "React",
                        "codeContent": "준비중",
                        "codeDescription": "준비중"
                    }
                ]
            }
        ]
    }
}